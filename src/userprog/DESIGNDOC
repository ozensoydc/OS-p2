                            +-----------------+                         
                            |      CS 230     |                     
                            |    Project 2    |                     
                            | DESIGN DOCUMENT |
                            +-----------------+

--- Group ---
Daniel Deng <ddeng@uchicago.edu>
Deniz Ozensoy <ozensoydc@uchicago.edu>

--- Preliminaries ---

Our code is not functional.  We have been stuck at being unable to properly exit
from user programs, which results with the tests forever hanging.  I (Deniz) 
worked on the stack aspect of the project and was very very confused by the
guide provided, which I'll elaborate upon below.

                            ARGUEMENT PASSING
                            =================

---- DATA STRUCTURES ----

(none)

---- ALGORITHMS ----

process.c
    1. A literal implementation of the stack as in the stack guidance sheet did
    not work for me. I've left my original code with all the relevant printf
    statements showing the accurate placement arguements and their addresses
    into the stack.  I was confused upon the insertion of some data (such as
    integers on to stack) but I believe they are also correctly implemented.
    However, I completely missed out on the relationship on the role of an
    interrupt frame with regards to argument passing.  Upon which, I've analyzed
    in detail (via comments in code) implementations of argument passing in 
    P2 with interrupt frames found in github.  One particularly clever one was
    on a git repo at: https://github.com/LucasSeveryn/pintOS/blob/master/src/
    userprog/process.c.  I will elaborate on my initial implementation of the
    stack, and this alternative.
    Originally: I skipped insertion of the whole commandline into stack as
    proposed upon realizing that the parsed argument strings are going to be
    longer than the command line, and as it did not make sense with the 
    descriptions in 3.5.1.  I first reversed each argument token in place.
    this put a null pointer at the beginning of each token, so I removed the 
    leading null tokens, and put a null token at the end of each reversed arg
    token.  Once all arg tokens were pushed, I reversed the byte order of all 
    the bytes falling in between:kpage+PGSIZE-(kpage+PGSIZE-total_arg_len).
    this ensured that for an echo/0 command, first I produced ohec/0 as a result
    of token inversion, and then /0ohce such that 'e' points to the lowest
    uaddr on the stack, such that a simple read given the location of 'e' 
    would produce echo/0.  This was following the implementation hints.  
    I see no advantages to this method, except maybe it requires less of 
    stack growth compared to the alternative implementation.  Also, seting up
    the stack in setup_stack did not resolve in successful argument passing
    without f_.esp pointing to the fake return address.  Which makes sense,
    but was not elaborated upon anywhere, and really threw me off track for 
    days.
    
    Alternative:
    
    Setting up the stack in start_process has the exact same memory requirements
    as the description above, except there is no longer a need to keep track of
    running total memory usage, simply pointing f_.esp to the furthest address
    in stack yet written into suffices.  This is great simplicity because it
    ensures that f_.esp is successfully pointing to the return address at the end
    of set up.
    
    A couple of convenient trics I've learned from analysis of Mr.Severyn's code
    was the idea to allocate arrays that store argument strings and addresses,
    and simply push them onto the stack in reverse order they are found in the 
    said args array, and adresses array

    
                                    System Calls

Data Structures

1. struct lock filesys_lock;
    This lock was acquired whenever any writing/reading to the filesystem was done,
    since the filesystem did not support multiple 

2. The following was added to thread.h and used for keeping track of
the children and parent of each respective thread.  Also, a list of
open files was also kept.

  nt32_t *pagedir;                  /* Page directory. */
  void *esp; //???          
  int ret;
  struct semaphore* child_alive;
  struct semaphore child_loading;
  struct semaphore pagedir_mod; ////////                         
  struct thread *parent;
  struct list_elem childelem;
  struct list children;
  struct list returned_children;                                       
  struct list files;
  int next_fd;
  struct semaphore child_lock;

3. This was used to keep track of relevent file information in each process.
Thus file descriptors were on a per process basis.
    struct file_handle
    {
        int fd;
        struct file *file;
        struct list_elem elem;
    }

4. A child gives this information to its parent in order for the wait command to work.
    struct return_status
    {
        int tid;
        int return_code;
        struct list_elem elem;
    }



Algorithms
1. The code for reading and writing user data involved first looking at the file descriptor.
If it was a special one such as stdin or stdout, then the relevent appropiate action was taken.
However, if we were actually using a file, we would first check if the buffer we were writing/
reading to were in valid memory locations.  Then we just used the relevent file commands.

2. Our wait implementation never got passed an infinite loop.

3.  I don't think I implemented system calls to a rigorous enough level to answer these
questions.

